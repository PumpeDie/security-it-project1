@version: 4.9
@include "scl.conf"

# Global options for log processing
options {
    time-reopen(10);       # Time to wait before attempting to reconnect
    mark-freq(10);         # Send a mark message every 10 seconds
    stats(freq(60));       # Log statistics every 60 seconds
    flush-lines(1);        # Flush after each message for real-time delivery
    chain-hostnames(no);   # Disable hostname chaining
    use-dns(no);           # Disable DNS lookups
    keep-hostname(yes);    # Keep original hostname information
};

# System and internal log sources
source s_local {
    system();              # Collect local system logs
    internal();            # Collect syslog-ng internal logs
};

# Suricata IDS log source - JSON format
source s_suricata {
    file("/var/log/suricata/eve.json"
        flags(no-parse)    # Don't parse as syslog - it's JSON
        follow-freq(1)     # Check for new data every second
    );
};

# JSON parser for structured logs
parser p_json {
    json-parser(
        prefix("")         # No prefix - maintain original JSON structure
    );
};

# Elasticsearch destination with authentication
destination d_elastic {
    elasticsearch-http(
        url("http://elasticsearch:9200/_bulk")
        index("syslog-ng-${YEAR}.${MONTH}.${DAY}")
        type("")           # Empty type for ES 7+ compatibility
        user("syslog")
        password("MetNousVingt")
        template("$(format-json --scope all-nv-pairs @timestamp=${ISODATE})\n")
        batch-lines(10)    # Send logs in batches of 10
        workers(2)         # Process with 2 worker threads
        disk-buffer(
            mem-buf-length(10000)
            disk-buf-size(2000000)
            reliable(yes)  # Don't lose messages during outages
        )
    );
};

# Console output for debugging
destination d_console {
    file("/dev/stdout");
};

# System log processing pipeline
log {
    source(s_local);
    destination(d_console);
    destination(d_elastic);
};

# Suricata log processing pipeline
log {
    source(s_suricata);
    parser(p_json);        # Parse JSON before forwarding
    destination(d_console);
    destination(d_elastic);
};
